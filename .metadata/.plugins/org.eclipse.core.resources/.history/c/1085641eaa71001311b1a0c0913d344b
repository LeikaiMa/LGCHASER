package wordLadderII;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class BackTrack {
	public static ArrayList<ArrayList<String>> findLadders(String start,
			String end, HashSet<String> dict) {
		ArrayList<ArrayList<String>> ladders = new ArrayList<ArrayList<String>>();
		HashMap<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();

		HashSet<String> visited = new HashSet<String>();
		HashSet<String> levelElements = new HashSet<String>();
		levelElements.add(start);

		while (!levelElements.isEmpty()) {
			HashSet<String> levelVisited = new HashSet<String>();
			HashSet<String> tmpLevelElements = new HashSet<String>();
			for (String s : levelElements) {
				for (String next : getNext(s)) {
					if (next.equals(end)
							|| (dict.contains(next) && !visited.contains(next))) {
						tmpLevelElements.add(next);
						levelVisited.add(next);
						if (map.containsKey(next)) {
							map.get(next).add(s);
						} else {
							ArrayList<String> parent = new ArrayList<String>();
							parent.add(s);
							map.put(next, parent);
						}
					}
				}
			}
			visited.addAll(levelVisited);
			levelElements = tmpLevelElements;
			if (map.containsKey(end)) {
				ArrayList<String> ends = new ArrayList<String>();
				ends.add(end);
				ladders = getBackTrack(map, ends, start);
				return ladders;
			}
		}
		return ladders;
	}

	private static ArrayList<ArrayList<String>> getBackTrack(
			HashMap<String, ArrayList<String>> map, ArrayList<String> end,
			String start) {
		ArrayList<ArrayList<String>> ladders = new ArrayList<ArrayList<String>>();
		if (end.contains(start)) {
			ArrayList<String> ladder = new ArrayList<String>();
			ladder.add(start);
			ladders.add(ladder);
		} else {
			for (String s : end) {
				ArrayList<String> preivous = map.get(s);
				ArrayList<ArrayList<String>> tmp = getBackTrack(map, preivous,
						start);
				for (ArrayList<String> t : tmp) {
					t.add(s);
					ladders.add(t);
				}
			}
		}

		return ladders;
	}

	private static ArrayList<String> getNext(String s) {
		ArrayList<String> nexts = new ArrayList<String>();
		for (int i = 0; i < s.length(); i++) {
			char[] word = s.toCharArray();
			for (char c = 'a'; c <= 'z'; c++) {
				if (c == s.charAt(i)) {
					continue;
				}
				word[i] = c;
				nexts.add(new String(word));
			}
		}
		return nexts;
	}
	
	public static void main(String[] args) {
		String start = "hit";
		String end = "cog";
		HashSet<String> dict = new HashSet<String>();
		dict.add("hot");
		dict.add("dot");
		dict.add("dog");
		dict.add("lot");
		dict.add("log");
		ArrayList<ArrayList<String>> ladders = new ArrayList<ArrayList<String>>();
		ladders = findLadders(start, end, dict);
		for (ArrayList<String> ladder: ladders) {
			System.out.println(ladder);
		}
		System.out.println();
		start = "a";
		end = "c";
		dict = new HashSet<String>();
		dict.add("a");
		dict.add("b");
		dict.add("c");
		
		ladders = findLadders(start, end, dict);
		for (ArrayList<String> ladder: ladders) {
			System.out.println(ladder);
		}
		System.out.println();
		start = "hot";
		end = "dog";
		dict = new HashSet<String>();

		dict.add("hot");
		dict.add("dog");
		
		ladders = findLadders(start, end, dict);
		for (ArrayList<String> ladder: ladders) {
			System.out.println(ladder);
		}
		System.out.println();
		
	}

}
