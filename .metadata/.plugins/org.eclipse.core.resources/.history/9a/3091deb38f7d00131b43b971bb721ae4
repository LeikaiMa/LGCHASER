package permutationII;

import java.util.ArrayList;
import java.util.Arrays;

public class RemoveDup {
    public static ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
        ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
        if (num == null || num.length == 0) {
            return results;
        }
        
        ArrayList<Integer> result = new ArrayList<Integer>();
        boolean[] visited = new boolean[num.length];
        Arrays.sort(num);
        helper(results, result, num, visited);
        
        return results;
    }

    public static  void helper(ArrayList<ArrayList<Integer>> results, ArrayList<Integer> result, int[] num, boolean[] visited) {
        if (result.size() == num.length) {
            results.add(new ArrayList<Integer>(result));
        } else {
            for (int i = 0; i < visited.length; i++) {
                if (!visited[i]) {
                    visited[i] = true;
                    result.add(num[i]);
                    helper(results, result, num, visited);
                    result.remove(result.size() - 1);
                    visited[i] = false;
                }
                
                while(i < visited.length - 1 && num[i] == num[i + 1]) {
                    i++;
                }
            }
        }
    }    
    
    
}
