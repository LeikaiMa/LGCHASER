package palindromePartitionI;

import java.util.ArrayList;

public class DFS {
	public static ArrayList<ArrayList<String>> partition(String s) {
		ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();
		if (s == null || s.isEmpty()) {
			return results;
		}
		int length = s.length();
		boolean[][] isPalindrome = new boolean[length][length];
		for (int i = 0; i < length; i++) {
			isPalindrome[i][i] = true;
			int expand = 1;
			while (i - expand >= 0 && i + expand < length) {
				if (s.charAt(i - expand) == s.charAt(i + expand)) {
					isPalindrome[i - expand][i + expand] = true;
					expand++;
				} else {
					break;
				}

			}
		}

		for (int i = 0; i < length - 1; i++) {
			if (s.charAt(i) != s.charAt(i + 1)) {
				continue;
			}
			isPalindrome[i][i + 1] = true;
			int expand = 1;
			while (i - expand >= 0 && i + 1 + expand < length) {
				if (s.charAt(i - expand) == s.charAt(i + 1 + expand)) {
					isPalindrome[i - expand][i + 1 + expand] = true;
					expand++;
				} else {
					break;
				}
			}
		}
//		for (int i = 0; i < length; i++) {
//			System.out.println(Arrays.toString(isPalindrome[i]));
//		}
		
		results = partitionHelper(s, 0, isPalindrome);
		return results;
	}
	
	public static ArrayList<ArrayList<String>> partitionHelper(String s, int start, boolean[][] isPalindrome) {
		ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();
		if (start == s.length()) {
			ArrayList<String> result = new ArrayList<String>();
			results.add(result);
			return new ArrayList<ArrayList<String>>();
		} else {
			
			for (int i = start; i < s.length(); i++) {
				if (isPalindrome[start][i]) {
					ArrayList<ArrayList<String>> nexts = partitionHelper(s, i+1, isPalindrome);
					for (ArrayList<String> next : nexts ) {
						next.add(0, s.substring(start, i+1));
						results.add(next);
					}
				}
			}
			return results;
		}
	}
	
	public static void main(String[] args) {
		String s = "aaba";
		ArrayList<ArrayList<String>> results = partition(s);
		for (ArrayList<String> result : results) {
			System.out.println(result);
		}
	}
}
