package buildBinaryTree;

import java.util.Hashtable;

public class BasedOnInorderPostOrder {
	public TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder ==null || postorder == null) {
			return null;
		}
		
		if (inorder.length != postorder.length) {
			return null;
		}
		
		Hashtable<Integer, Integer> inorderHt = new Hashtable<Integer, Integer>();
		for (int i = 0; i < inorder.length; i++) {
			inorderHt.put(inorder[i], i);
		}
		TreeNode root = new TreeNode(postorder[postorder.length - 1]);
		insertChild(root, inorderHt, postorder);
		return root;
	}
	
	private static void insertChild(TreeNode root, Hashtable<Integer, Integer> inorder, int[] postorder) {
		int leftEnd = inorder.get(root.val) - 1;
		int rightBegin = inorder.get(root.val) + 1;
	}
}
