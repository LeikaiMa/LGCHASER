package firstMissingPositive;
// 寻找第一个没有的正数。
// 因为复杂度要求是在O(n) 所以不能用sort 之后顺序找的方法。
// 看到n 应该可以推测出一个一个检查过去。在检查的时候做操作。
// 因为是正数，可以利用index 是从0 开始的正整数，可以将所对应的如果在1-n范围的内的放在对应 的 0 - n-1 上面。
public class UseArrayIndex {
	public static int firstMissingPositive(int[] A) {
		if (A == null || A.length == 0) {
			return 1;
		}
		int n = A.length;
		for (int i = 0; i < n; i++) {
			if (A[i] != i + 1 && A[i] > 0 && A[i] <= n && A[A[i] - 1] != A[i]) {
				int tmp = A[i];
				A[i] = A[tmp - 1];
				A[tmp - 1] = tmp;
				i--;
			}
		}

		for (int i = 0; i < n; i++) {
			if (A[i] != i + 1) {
				return i + 1;
			}
		}
		return n + 1;
	}

	public static void main(String[] args) {
		// int[] A = {1,2,0};
		// int[] A ={3,4,-1,1};
		int[] A = { 1, 1 };
		System.out.println(firstMissingPositive(A));
	}
}
