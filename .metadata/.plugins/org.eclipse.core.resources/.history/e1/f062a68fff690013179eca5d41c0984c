package distinctSubsequences;

import java.util.ArrayList;
import java.util.SortedSet;
import java.util.TreeSet;

public class DPSolution {
	public int numDistinct(String S, String T) {
//		if (S.length() < T.length()) {
//			return 0;
//		}
//
//		if (T.length() == 0 && S.length() != 0) {
//			return 1;
//		}
//
//		if (T.length() == 0 && S.length() == 0) {
//			return 1;
//		}
//		ArrayList<TreeSet<Integer>> tArrayList = new ArrayList<TreeSet<Integer>>();
//		for (int i = 0; i < T.length(); i++) {
//			tArrayList.add(new TreeSet<Integer>());
//		}
//		for (int i = 0; i < T.length(); i++) {
//			for (int j = 0; j < S.length(); j++) {
//				if (T.charAt(i) == S.charAt(j)) {
//					tArrayList.get(i).add(j);
//				}
//			}
//		}
//		if (tArrayList.size() == 1) {
//			return tArrayList.get(0).size();
//		}
//		int num = numDistinctHelper(tArrayList, 1, tArrayList.get(0).tailSet(0));
//		return num;
		
		int[][] dp = new int[T.length() + 1][S.length() + 1];  
		  dp[0][0] = 1;  
		  for (int i = 1; i <= T.length(); i++) {  
		    dp[i][0] = 0;  
		  }  
		  for (int j = 1; j <= S.length(); j++) {  
		    dp[0][j] = 1;  
		  }  
		  for (int i = 1; i <= T.length(); i++) {  
		    for (int j = 1; j <= S.length(); j++) {  
		      dp[i][j] = dp[i][j - 1];  
		      if (T.charAt(i - 1) == S.charAt(j - 1)) {  
		        dp[i][j] += dp[i - 1][j - 1];  
		      }  
		    }  
		  }  
		  return dp[T.length()][S.length()];  
		      
	}

	private int numDistinctHelper(ArrayList<TreeSet<Integer>> tArrayList,
			int start, SortedSet<Integer> subT) {
		if (start == tArrayList.size()) {
			return subT.size();
		} else {
			int result = 0;
			for (int i : subT) {
				SortedSet<Integer> nextT = tArrayList.get(start).tailSet(i + 1);
				if (nextT.size() == 0) {
					continue;
				}
				result += numDistinctHelper(tArrayList, start + 1, nextT);
			}
			return result;
		}
	}

	public static void main(String[] args) {
//		String S = "ABCDE";
//		String T = "AEC";
		// String S = "rabbbit";
		// String T = "rabbit";
		 String S = "aacaacca";
		 String T = "ca";
		System.out.println(new DPSolution().numDistinct(S, T));
	}
}
