package provideLockNoDeadLock;

import java.util.HashMap;
import java.util.LinkedList;

import org.omg.CORBA.INTERNAL;

public class LockFactory {
	private static LockFactory instance;

	private int numberOfLocks = 5;

	private LockNode[] locks;

	private HashMap<Integer, LinkedList<LockNode>> lockOrder;

	private LockFactory(int count) {

	}

	public static LockFactory getInstance() {
		return instance;
	}

	public static synchronized LockFactory initialize(int count) {
		if (instance == null) {
			instance = new LockFactory(count);
		}

		return instance;
	}

	public boolean hasCycle(HashMap<Integer, Boolean> touchedNodes,
			int[] resourcesInOrder) {
		for (int resource : resourcesInOrder) {
			if (touchedNodes.get(resource) == false) {
				LockNode n = locks[resource];
				if (n.hasCycle(touchedNodes)) {
					return true;
				}
			}
		}

		return false;
	}
	
	public boolean declare(int ownerId, int[] resourcesInOrder) {
		HashMap<Integer, Boolean> touchedNodes = new HashMap<>();
		
		int index = 1;
		touchedNodes.put(resourcesInOrder[0], false);
		
		for (index = 1; index < resourcesInOrder.length; index++) {
			LockNode prev = locks[resourcesInOrder[index - 1]];
		}
	}
}
