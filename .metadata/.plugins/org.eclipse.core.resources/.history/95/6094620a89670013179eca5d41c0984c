package buildBinaryTree;

import java.util.Arrays;

public class BasedOnInorderPostOrder {
	public static TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder == null || postorder == null) {
			return null;
		}

		if (inorder.length != postorder.length) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postorder.length - 1]);
		int index = -1;
		for (int i = 0; i < inorder.length; i++) {
			if (inorder[i] == postorder[postorder.length - 1]) {
				index = i;
				break;
			}
		}

		int leftEnd = index - 1;
		int rightEnd = postorder.length - 2;
		if (leftEnd >= 0) {
			root.left = buildTree(Arrays.copyOfRange(inorder, 0, leftEnd + 1),
					Arrays.copyOfRange(postorder, 0, leftEnd + 1));
		}

		if (rightEnd > leftEnd) {
			root.right = buildTree(
					Arrays.copyOfRange(inorder, index + 1, inorder.length),
					Arrays.copyOfRange(postorder, index, postorder.length));
		}

		return root;
	}

	public static void main(String[] args) {
		int[] inorder = { 1, 2, 3, 4, 5 };
		int[] postorder = { 1, 3, 5, 4, 2 };
		TreeNode root = buildTree(inorder, postorder);
		printTree(root);
	}

	public static void printTree(TreeNode root) {
		if (root.left != null) {
			printTree(root.left);
		}
		System.out.println(root.val + ",");
		if (root.right != null) {
			printTree(root.right);
		}
	}
}
