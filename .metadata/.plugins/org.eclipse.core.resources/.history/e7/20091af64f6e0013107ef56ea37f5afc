package oneWordATime;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class BackTrackBST {
	LinkedList<String> transform(String startWord, String stopWord, Set<String> dictionary) {
		startWord = startWord.toUpperCase();
		stopWord = stopWord.toUpperCase();
		Queue<String> actionQueue = new LinkedList<String>();
		Set<String> visitedSet= new HashSet<String>();
		Map<String, String> backtrackMap = new TreeMap<String, String>();
		
		actionQueue.add(startWord);
		visitedSet.add(startWord);
		
		while (!actionQueue.isEmpty()) {
			String w = actionQueue.poll();
			for (String v: getOneEditWords(w)) {
				if (v.equals(stopWord)) {
					LinkedList<String> list = new LinkedList<String>();
					list.add(v);
				}
			}
		}
		return null;
		
	}
	
	Set<String> getOneEditWords(String word) {
		Set<String> words = new TreeSet<String>();
		for (int i = 0; i < word.length(); i++) {
			char[] wordArray = word.toCharArray();
			for (char c = 'A'; c <= 'Z'; c++) {
				if (c != word.charAt(i)) {
					wordArray[i] = c;
					words.add(new String(wordArray));
				}
			}
		}
		return words;
	}
}
