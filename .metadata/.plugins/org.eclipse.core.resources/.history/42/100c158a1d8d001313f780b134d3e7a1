package lruCache;

import java.util.HashMap;

public class ImplementLinkedHashMapOnMyOwn {

	public HashMap<Integer, DoubleLinkedListNode> table = new HashMap<>();
	public DoubleLinkedListNode head;
	public DoubleLinkedListNode end;
	public int capacity;
	public int len;

	public ImplementLinkedHashMapOnMyOwn(int capacity) {
		this.capacity = capacity;
		len = 0;
	}

	public int get(int key) {
		if (table.containsKey(key)) {
			removeNode(table.get(key));
			setHead(table.get(key));
			return table.get(key).val;
		}
	}

	public void setHead(DoubleLinkedListNode node) {
		node.post = head;
		node.pre = null;
	}
	
	public void removeNode(DoubleLinkedListNode node) {
		DoubleLinkedListNode cur = node;
		DoubleLinkedListNode pre = cur.pre;
		DoubleLinkedListNode post = cur.post;

		if (pre != null) {
			pre.post = post;
		} else {
			head = post;
		}

		if (post != null) {
			post.pre = pre;
		} else {
			end = pre;
		}
	}

	public class DoubleLinkedListNode {
		public int val;
		public int key;
		public DoubleLinkedListNode pre;
		public DoubleLinkedListNode post;

		public DoubleLinkedListNode(int key, int value) {
			val = value;
			this.key = key;
		}
	}
}
