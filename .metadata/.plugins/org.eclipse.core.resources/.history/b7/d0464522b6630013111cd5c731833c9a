package binaryTreeInorderTraversal;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Stack;

public class HashTableIterative {

	public static ArrayList<Integer> InOderTraversal(TreeNode root) {
		ArrayList<Integer> arrayList = new ArrayList<Integer>();
		Stack<TreeNode> stack1 = new Stack<TreeNode>();
		Stack<Boolean> stack2 = new Stack<Boolean>();
		if (root == null) {
			return arrayList;
		}
		insertStack(root, stack1, stack2);

		while (!stack.isEmpty()) {
			Hashtable<TreeNode, Boolean> node = stack.pop();
			// || (right == null && left == null)
			if (node.elements().nextElement()) {
				arrayList.add();
			} else {
				if (right != null) {
					stack.push(new TreeNodeVisited(right, false));
				}
				stack.push(new TreeNodeVisited(cur, true));
				if (left != null) {
					stack.push(new TreeNodeVisited(left, false));
				}
			}
		}
		return arrayList;

	}
	
	
	public static void insertStack(TreeNode root, Stack<TreeNode> stack1, Stack<Boolean> stack2) {
		if (root.right != null) {
			stack1.push(root.right);
			stack2.push(false);
		}
		
		stack1.push(root);
		stack2.push(true)

		if (root.left != null) {
			Hashtable<TreeNode, Boolean> left= new Hashtable<TreeNode, Boolean>();
			left.put(root.left, false);
		}
	}

	public static void main(String[] args) {
		TreeNode one = new TreeNode(1);
		TreeNode two = new TreeNode(2);
		TreeNode three = new TreeNode(3);
		TreeNode four = new TreeNode(4);
		one.right = two;
		one.left = four;
		two.left = three;
		ArrayList<Integer> inOderTraversal = InOderTraversal(one);
		System.out.println(inOderTraversal.toString());
	}
}
