package wordLadderII;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class BackTrack {
	public static ArrayList<ArrayList<String>> findLadders(String start,
			String end, HashSet<String> dict) {
		ArrayList<ArrayList<String>> ladders = new ArrayList<ArrayList<String>>();
		HashMap<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();

		HashSet<String> visited = new HashSet<String>();
		HashSet<String> levelElements = new HashSet<String>();
		levelElements.add(start);

		while (!levelElements.isEmpty()) {
			HashSet<String> levelVisited = new HashSet<String>();
			HashSet<String> tmpLevelElements = new HashSet<String>();
			for (String s : levelElements) {
				for (String next : getNext(s)) {
					if (next.equals(end)
							|| (dict.contains(next) && !visited.contains(next))) {
						tmpLevelElements.add(next);
						levelVisited.add(next);
						if (map.containsKey(next)) {
							map.get(next).add(s);
						} else {
							ArrayList<String> parent = new ArrayList<String>();
							parent.add(s);
							map.put(next, parent);
						}
					}
				}
			}
			visited.addAll(levelVisited);
			levelElements = tmpLevelElements;
			if (map.containsKey(end)) {
				ArrayList<String> ends = new ArrayList<String>();
				ends.add(end);
				ladders = getBackTrack(map, ends, start);
				return ladders;
			}
		}
		return ladders;
	}

	private static ArrayList<ArrayList<String>> getBackTrack(
			HashMap<String, ArrayList<String>> map, ArrayList<String> end, String start) {
		ArrayList<ArrayList<String>> ladders = new ArrayList<ArrayList<String>>();
		if (end.equals(start)) {
			ArrayList<String> ladder = new ArrayList<String>();
			ladder.add(start);
			ladders.add(ladder);
		} else {
			
		}	
		
		return ladders;
	}

	private static ArrayList<String> getNext(String s) {
		ArrayList<String> nexts = new ArrayList<String>();
		for (int i = 0; i < s.length(); i++) {
			char[] word = s.toCharArray();
			for (char c = 'a'; c <= 'z'; c++) {
				if (c == s.charAt(i)) {
					continue;
				}
				word[i] =c;
				nexts.add(new String(word));
			}
		}
		return nexts;
	}

}
