package unsortedMiddleArray;

public class UnsortedMiddleArray {
	public void findUnsortedSequence(int[] array) {
		int end_left = findEndOfLeftSubsequence(array);
		int start_right = findStartOfRightSubsequence(array);

		int min_index = end_left + 1;
		if (min_index >= array.length) {
			return;
		}

		int max_index = start_right - 1;
		for (int i = end_left; i <= start_right; i++) {
			if (array[i] < array[min_index]) {
				min_index = i;
			}
			if (array[i] > array[max_index]) {
				max_index = i;
			}
		}
		
		int left_index = shrinkLeft(array, min_index, end_left);

	}

	private int shrinkLeft(int[] array, int min_index, int end_left) {
		
		return 0;
	}

	private int findStartOfRightSubsequence(int[] array) {
		for (int i = array.length - 2; i >= 0; i--) {
			if (array[i] > array[i + 1]) {
				return i + 1;
			}
		}
		return 0;
	}

	private int findEndOfLeftSubsequence(int[] array) {
		for (int i = 1; i < array.length; i++) {
			if (array[i] < array[i - 1]) {
				return i - 1;
			}
		}
		return array.length - 1;
	}
}
