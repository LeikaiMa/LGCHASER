package maximalRectangle;

import java.util.Stack;

public class MaximumHistogram {
	public int maximalRectangle(char[][] matrix) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return 0;
		}
		int row = matrix.length;
		int column = matrix[0].length;
		int[][] maxHeight = new int[row][column + 1];

		for (int j = 0; j < column; j++) {
			if (matrix[0][j] == '1') {
				maxHeight[0][j] = 1;
			}
		}

		for (int i = 1; i < row; i++) {
			for (int j = 0; j < column; j++) {
				if (matrix[i][j] == '1') {
					maxHeight[i][j] = 1 + maxHeight[i - 1][j];
				}
			}
		}
		
		int max = 0;
		
		for (int i = 0; i < row; i++) {
			max = Math.max(max, getMaxRectangleHistogram(maxHeight, i));
		}
		
		return max;
	}

	private int getMaxRectangleHistogram(int[][] maxHeight, int row) {
		Stack<Integer> indexes = new Stack<Integer>();
		int max = 0;
		for (int j = 0; j < maxHeight[row].length; j++) {
			if (indexes.isEmpty() || maxHeight[row][indexes.peek()] <= maxHeight[row][j]) {
				indexes.push(j);
			} else {
				indexes.pop();
				max = Math.max(max, maxHeight[row][j] *( indexes.isEmpty() ? j : j - (indexes.peek() + 1)));
			}
		}
		return 0;
	}
}
