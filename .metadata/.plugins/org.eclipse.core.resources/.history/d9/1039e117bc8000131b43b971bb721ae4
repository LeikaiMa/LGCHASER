package sortList;

public class CutOneListIntoHalves {
	public ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}

		ListNode slow = head;
		ListNode fast = head.next;

		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}

		ListNode head1 = head;
		ListNode head2 = slow.next;
		slow.next = null;

		head1 = sortList(head1);
		head2 = sortList(head2);

		return merge(head1, head2);
	}

	private ListNode merge(ListNode l1, ListNode l2) {
		ListNode dummy = new ListNode(0);
		ListNode prev = dummy;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				prev.next = l1;
				l1 = l1.next;
				prev = prev.next;
			} else {
				prev.next = l2;
				l2 = l2.next;
				prev = prev.next;
			}
		}

		if (l1 != null) {
			prev.next = l1;
		} else {
			prev.next = l2;
		}

		return dummy.next;
	}
}
