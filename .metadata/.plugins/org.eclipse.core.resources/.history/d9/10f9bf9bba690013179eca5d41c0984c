package palindromePartitionI;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class DP {
	public static ArrayList<ArrayList<String>> partition(String s) {
		ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
		if (s == null || s.isEmpty()) {
			return result;
		}
		s = s.trim().replace(" ", "");
		s = s.replace("[^a-zA-Z0-9]", "").toLowerCase();
		HashMap<Integer, ArrayList<Integer>> palindromes = new HashMap<Integer, ArrayList<Integer>>();

		int length = s.length();
		for (int i = 0; i < length; i++) {
			ArrayList<Integer> a = new ArrayList<Integer>();
			a.add(i);
			palindromes.put(i, a);
		}

		for (int i = 1; i < length - 1; i++) {
			int expand = 1;
			while (i - expand >= 0 && i + expand < length) {
				int e = 1;
				for (; e <= expand; e++) {
					if (s.charAt(i - e) != s.charAt(i + e)) {
						break;
					}
				}
				if (e > expand) {
					ArrayList<Integer> a = palindromes.get(i - expand);
					a.add(i + expand);
					expand++;
				} else {
					break;
				}
			}
		}

		for (int i = 0; i < length - 1; i++) {
			if (s.charAt(i) != s.charAt(i + 1)) {
				continue;
			} else {
				ArrayList<Integer> a = palindromes.get(i);
				a.add(i + 1);
			}
			int expand = 1;
			while (i - expand >= 0 && i + 1 + expand < length) {
				int e = 1;
				for (; e <= expand; e++) {
					if (s.charAt(i - e) != s.charAt(i + 1 + e)) {
						break;
					}
				}
				if (e > expand) {
					ArrayList<Integer> a = palindromes.get(i - expand);
					a.add(i + 1 + expand);
					expand++;
				} else {
					break;
				}
			}
		}

		for (Map.Entry<Integer, ArrayList<Integer>> entry : palindromes
				.entrySet()) {
			for (int i : entry.getValue()) {
				System.out.println(s.substring(entry.getKey(), i + 1));
			}
		}
		return null;
	}

	public static void main(String[] args) {
		String s = "aabaa  AA";
		partition(s);
	}
}
