package validBinarySearchTree;


public class DFS {
	public boolean isValidBST(TreeNode root) {
//		if (root == null) {
//			return true;
//		}
//
//		TreeNode leftNode = root.left;
//		TreeNode rightNode = root.right;
//		if (root.left != null) {
//			if (root.val <= leftNode.val) {
//				return false;
//			}
//		}
//
//		if (root.right != null) {
//			if (root.val >= rightNode.val) {
//				return false;
//			}
//		}
//
//		if (!isValidBSTHelper(root.left, Integer.MIN_VALUE,root.val)
//				|| !isValidBSTHelper(root.right, root.val, Integer.MAX_VALUE)) {
//			return false;
//		}
//		return true;
		return isValidBSTHelper(root, Integer.MIN_VALUE, Integer.MAX_VALUE)
	}

	
	
	private boolean isValidBSTHelper(TreeNode root, int min, int max) {
		if (root == null) {
			return true;
		}

		TreeNode leftNode = root.left;
		TreeNode rightNode = root.right;
		if (root.left != null) {
			if (root.val <= leftNode.val ||  leftNode.val<= min) {
				return false;
			}
		}

		if (root.right != null) {
			if (root.val >= rightNode.val|| rightNode.val >= max) {
				return false;
			}
		}
		
		if (!isValidBSTHelper(root.left, min ,root.val)
				|| !isValidBSTHelper(root.right, root.val, max)) {
			return false;
		}
		return true;
	}



	public static void main(String[] args) {
		TreeNode t1 = new TreeNode(10);
		TreeNode t2 = new TreeNode(5);
		TreeNode t3 = new TreeNode(15);
		TreeNode t4 = new TreeNode(6);
		TreeNode t5 = new TreeNode(20);
		
		t1.left = t2;
		t1.right = t3;
		t3.left = t4;
		t3.right = t5;
		
		System.out.println(new DFS().isValidBST(t1));
		
		
	}
}
