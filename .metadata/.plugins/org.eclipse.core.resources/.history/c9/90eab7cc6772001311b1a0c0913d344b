package maxPointsOnALine;

import java.util.HashMap;
import java.util.Map;

public class UseHashMap {
	public int maxPoints(Point[] points) {
		if (points == null || points.length == 0) {
			return 0;
		}
		if (points.length == 1 || points.length == 2) {
			return points.length;
		}
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < points.length - 1; i++) {
			HashMap<Double, Integer> slides = new HashMap<Double, Integer>();
			int dup = 0;
			for (int j = i + 1; j < points.length; j++) {
				double slide = getSlide(points[i], points[j]);
				if (slide ==  Double.MIN_VALUE) {
					dup++;
					continue;
				}
				if (slides.containsKey(slide)) {
					slides.put(slide, slides.get(slide) + 1);
				} else {
					slides.put(slide, 2);
				}
			}
			
			int curMax = dup;
			if (slides.size() > 0) {
				for (Map.Entry<Double, Integer> entry: slides.entrySet()) {
					curMax =  Math.max(curMax, entry.getValue() + dup);
				}
			}
			max = Math.max(curMax, max);
		}
		return max;
	}

	private double getSlide(Point p1, Point p2) {
		if (p1.x == p2.x && p1.y ==  p2.y) {
			return Double.MIN_VALUE;
		} else if (p1.x == p2.x) {
			return Double.MAX_VALUE;
		} else {
			return (p1.y - p2.y) * 1.0 /(p1.x - p2.x);
		}
		
	}
}
