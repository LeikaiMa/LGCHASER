package uniquePathII;

public class DP {
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
		if (obstacleGrid == null || obstacleGrid.length == 0
				|| obstacleGrid[0].length == 0) {
			return 0;
		}
		int row = obstacleGrid.length;
		int column = obstacleGrid[0].length;
		if (obstacleGrid[0][0] == 1 || obstacleGrid[row - 1][column - 1] == 1) {
			return 0;
		}
		if (row == 1) {
			for (int c = 0; c < column; c++) {
				if (obstacleGrid[row][c] == 1) {
					return 0;
				}
			}
			return 1;
		}

		if (column == 1) {
			for (int r = 0; r < row; r++) {
				if (obstacleGrid[r][column] == 1) {
					return 0;
				}
			}
			return 1;
		}

		for (int r = 0; r < row; r++) {
			for (int c = 0; c < column; c++) {
				if (obstacleGrid[r][c] == 1) {
					obstacleGrid[r][c] = -1;
				}
			}
		}

		for (int r = 0; r < row; r++) {
			if (obstacleGrid[r][0] != -1) {
				obstacleGrid[r][0] = 1;
			}
		}
		for (int c = 0; c < column; c++) {
			if (obstacleGrid[0][c] != -1) {
				obstacleGrid[0][c] = 1;
			}
		}
		
		for (int r = 1; r < row; r++) {
			for (int c = 1; c< column; c++) {
				if (obstacleGrid[r] [c] == -1) {
					continue;
				}
			}
		}
	}
}
