package binaryTreeMaxSum;
// 寻找sum 最大的路径，因为不一定是最开始的root ，每个node 都可以作为一个完整的root。
public class RecursiveCompare {
	public static int maxPathSum(TreeNode root) {
		if (root == null) {
			return 0;
		}
		int[] maxSum = new int[1];
		maxSum[0] = Integer.MIN_VALUE;
		maxPathSumHelper(root, maxSum);
		return maxSum[0];
	}

	private static int maxPathSumHelper(TreeNode root, int[] maxSum) {
		if (root == null) {
			return 0;
		}

		int cur = root.val;
		int left = maxPathSumHelper(root.left, maxSum);
		int right = maxPathSumHelper(root.right, maxSum);
		int arc = cur + left + right;
		int side = Math.max(cur, Math.max(left, right) + cur);
		int max = Math.max(arc, side);
		maxSum[0] = Math.max(maxSum[0], max);
		return side;
	}

	public static void main(String[] args) {
		TreeNode root = new TreeNode(-3);
		System.out.println(maxPathSum(root));
	}

}
