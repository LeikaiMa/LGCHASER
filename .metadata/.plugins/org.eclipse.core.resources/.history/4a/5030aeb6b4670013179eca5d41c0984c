package minimumSumPath;

public class MinimumSumPath {
	public static int minPathSum(int[][] grid) {
		if (grid == null) {
			return 0;
		}
		int row = grid.length;
		int column = grid[0].length;
		for (int i = 1; i <= row + column - 2; i++) {
			for (int j = 0; j <= Math.min(row-1, i); j++) {
				if (i - j > column - 1) {
					continue;
				}
				if (i - j - 1 >= 0 && j - 1 >= 0) {
					grid[j][i - j] += Math.min(grid[j][i - j - 1],
							grid[j - 1][i - j]);
				} else if (i - j - 1 >= 0) {
					grid[j][i - j] += grid[j][i - j - 1];
				} else {
					grid[j][i - j] += grid[j - 1][i - j];
				}
			}
		}
		return grid[row - 1][column - 1];
	}

	public static void main(String[] args) {
		// int[][] grid = new int[2][2];
		// grid[0][0] = 1;
		// grid[0][1] = 2;
		// grid[1][0] = 3;
		// grid[1][1] = 4;
		int[][] grid = new int[3][3];
		grid[0][0] = 1;
		grid[0][1] = 3;
		grid[0][2] = 1;
		grid[1][0] = 1;
		grid[1][1] = 5;
		grid[1][2] = 1;
		grid[2][0] = 4;
		grid[2][1] = 2;
		grid[2][2] = 1;
		int shortest;
		shortest = minPathSum(grid);
		System.out.println(shortest);
	}
}
