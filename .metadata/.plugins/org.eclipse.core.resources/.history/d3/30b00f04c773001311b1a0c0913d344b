package sortList;

public class MergeSort {
	public static ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}

		ListNode slow = head;
		ListNode fast = head.next;

		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}

		ListNode head1 = head;
		ListNode head2 = slow.next;
		slow.next = null;

		head1 = sortList(head1);
		head2 = sortList(head2);

		return merge(head1, head2);
	}

	private static ListNode merge(ListNode head1, ListNode head2) {
		ListNode dummy = new ListNode(0);
		ListNode prev = dummy;

		while (head1 != null && head2 != null) {
			if (head1.val <= head2.val) {
				prev.next = head1;
				head1 = head1.next;
			} else {
				prev.next = head2;
				head2 = head2.next;
			}
			prev = prev.next;
		}

		if (head1 == null) {
			prev.next = head2;
		} else {
			prev.next = head1;
		}
		return dummy.next;

	}
	
	public static void printList(ListNode head) {
		while (head != null) {
			System.out.print(head.val + "=>");
			head = head.next;
		}
		
		System.out.println("NULL");
	}
	
	public static void main(String[] args) {
		
	}

}
