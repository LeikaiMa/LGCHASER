package nQueensII;

public class Permutation {
	public static int totalNQueens(int n) {
		if (n == 0 || n == 1) {
			return n;
		}
		int[] p = new int[n];
		for (int i = 0; i < n; i++) {
			p[i] = i;
		}

		int[] res = new int[1];
		res[0] = 0;
		permutation(p, 0, n - 1, res);
		return res[0];
	}

	private static void permutation(int[] p, int start, int end, int[] res) {
		if (start == end) {
			if (check(p)) {
				res[0]++;
			}
		} else {
			for (int i = start; i < p.length - 1; i++) {
				
					swap(p, i, j);
					permutation(p, start + 1, end, res);
					swap(p, i, j);
				
			}
		}
	}

	private static boolean check(int[] p) {
		for (int i = 0; i < p.length; i++) {
			for (int j = i + 1; j < p.length; j++) {
				if (Math.abs(p[i] - p[j]) == Math.abs(i - j)) {
					return false;
				} 
			}
		}
		return true;
	}

	private static void swap(int[] p, int i, int j) {
		p[i] = p[i] ^ p[j];
		p[j] = p[i] ^ p[j];
		p[i] = p[i] ^ p[j];

	}

}
