package permutationsI;

import java.util.ArrayList;

public class DFS {
	public static ArrayList<ArrayList<Integer>> permute(int[] num) {
		ArrayList<ArrayList<Integer>> permutations = new ArrayList<ArrayList<Integer>>();
		if (num == null || num.length == 0) {
			return permutations;
		}

		ArrayList<Integer> permutation = new ArrayList<Integer>();
		boolean[] visited = new boolean[num.length];
		
		permuteHelper(permutations, permutation, visited, num, 0);
		return permutations;
	}

	private static void permuteHelper(
			ArrayList<ArrayList<Integer>> permutations,
			ArrayList<Integer> permutation, boolean[] visited, int[] num, int step) {
		if (step == num.length) {
			ArrayList<Integer> p = new ArrayList<>(permutation);
			permutations.add(p);
		} else {
			for (int i = 0; i < num.length; i++) {
				if (!visited[i]) {
					visited[i] = true;
					permutation.add(num[i]);
					permuteHelper(permutations, permutation, visited, num, step + 1);
					permutation.remove(step);
					visited[i] = false;
				}
			}
		}
	}
	
	public static void main(String[] args) {
		int[] num = {1, 2, 3};
		ArrayList<ArrayList<Integer>> permutations = new ArrayList<ArrayList<Integer>>();
		permutations = permute(num);
		for (ArrayList<Integer> a : permutations) {
			System.out.println(a);
		}
	}
}
