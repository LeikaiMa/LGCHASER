package palindromePartitionII;

import java.util.ArrayList;

public class DP {
	public int minCut(String s) {

		if (s == null || s.isEmpty()) {
			return 0;
		}
		int length = s.length();
		boolean[][] isPalindrome = new boolean[length][length];
		for (int i = 0; i < length; i++) {
			isPalindrome[i][i] = true;
			int expand = 1;
			while (i - expand >= 0 && i + expand < length) {
				if (s.charAt(i - expand) == s.charAt(i + expand)) {
					isPalindrome[i - expand][i + expand] = true;
					expand++;
				} else {
					break;
				}

			}
		}

		for (int i = 0; i < length - 1; i++) {
			if (s.charAt(i) != s.charAt(i + 1)) {
				continue;
			}
			isPalindrome[i][i + 1] = true;
			int expand = 1;
			while (i - expand >= 0 && i + 1 + expand < length) {
				if (s.charAt(i - expand) == s.charAt(i + 1 + expand)) {
					isPalindrome[i - expand][i + 1 + expand] = true;
					expand++;
				} else {
					break;
				}
			}
		}

	}
}
