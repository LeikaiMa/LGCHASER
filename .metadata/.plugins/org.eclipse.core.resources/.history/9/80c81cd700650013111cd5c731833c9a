package sudoku;

import java.util.ArrayList;
import java.util.HashSet;

import sudoku.Sudoku.Coordinate;

public class BruteForce {
	public static ArrayList<Coordinate> getCandidates(char[][] board, int row,
			int column) {
		HashSet<Character> candidates = new HashSet<Character>();
		ArrayList<Coordinate> slots = new ArrayList<Coordinate>();
		for (char c = '1'; c <= '9'; c++) {
			candidates.add(c);
		}
		for (int i = 0; i < board[0].length; i++) {
			if (candidates.contains(board[row][i])) {
				candidates.remove(board[row][i]);
			}
		}

		for (int i = 0; i < board.length; i++) {
			if (candidates.contains(board[i][column])) {
				candidates.remove(board[i][column]);
			}
		}
		int r = row / 3;
		int c = column / 3;
		for (int i = 3 * r; i < 3 * r + 3; i++) {
			for (int j = 3 * c; j < 3 * c + 3; j++) {
				if (candidates.contains(board[i][j])) {
					candidates.remove(board[i][j]);
				}
			}
		}
		for (Character content : candidates) {
			Coordinate coordinate = new Coordinate(row, column, content);
			slots.add(coordinate);
		}
		return slots;

	}
	
	private static class Coordinate {
		int row;
		int column;
		char candidate;

		public Coordinate(int r, int c, char can) {
			row = r;
			column = c;
			candidate = can;
		}

		public int getRow() {
			return row;
		}

		public int getColumn() {
			return column;
		}

		public char getCandidate() {
			return candidate;
		}

		public String toString() {
			String s = "Row:" + row + " Column: " + column + " Candidate: "
					+ candidate;
			return s;
		}
	}
}
