package sudoku;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Stack;

public class Sudoku {
	public static boolean isValidSudoku(char[][] board) {
		// int r = 0;
		// int c = 5;
		ArrayList<Coordinate> candidates = new ArrayList<Coordinate>();
		// candidates = getCandidates(board, r, c);
		// System.out.println(candidates);
		// return false;
		Stack<Coordinate> stack = new Stack<Coordinate>();
		findNext(board, stack, true);

		
		

//		int i = 0, j = 0;
//		for (i = 0; i < board.length; i++) {
//			for (j = 0; j < board[0].length; j++) {
//				if (board[i][j] == '.') {
//					if (stack.empty()) {
//						break;
//					}
//					Coordinate cur = stack.pop();
//					board[cur.getRow()][cur.getColumn()] = cur.getCandidate();
//				}
//			}
//			if (stack.empty()) {
//				break;
//			}
//		}
		
		while (!stack.isEmpty()) {
			Coordinate cur = stack.pop();
			board[cur.getRow()][cur.getColumn()] = cur.getCandidate();
			if (cur.getCandidate() == '.') {
				cur = stack.pop();
				board[cur.getRow()][cur.getColumn()] = cur.getCandidate();
			}
			for (int i = 0; i < )) 
			
			
		}
//		printBoard(board);
//		if (i == board.length- 1 && j == board[0].length-1) {
//			return true;
//		} else {
//			return false;
//		}
		
	}

	public static void  findNext(char[][] board, Stack<Coordinate> stack, boolean isFirst) {
		ArrayList<Coordinate> candidates = new ArrayList<Coordinate>();
		int i = 0;
		int j = 0;
		for (i = 0; i < board.length; i++) {
			for (j = 0; j < board[0].length; j++) {
				if (board[i][j] == '.') {
					candidates = getCandidates(board, i, j);
				}
			}
		}
		if (!isFirst) {
			Coordinate c = new Coordinate(i, j, '.');
			stack.add(c);
		}
		for (Coordinate coordinate : candidates) {
			stack.add(coordinate);
		}
		
	}
	// public static HashSet<Character> getCandidates(char[][] board, int row,
	// int column) {
	// HashSet<Character> candidates = new HashSet<Character>();
	// for (char c = '1'; c <= '9'; c++) {
	// candidates.add(c);
	// }
	// for (int i = 0; i < board[0].length; i++) {
	// if (candidates.contains(board[row][i])) {
	// candidates.remove(board[row][i]);
	// }
	// }
	//
	// for (int i = 0; i < board.length; i++) {
	// if (candidates.contains(board[i][column])) {
	// candidates.remove(board[i][column]);
	// }
	// }
	// int r = row / 3;
	// int c = column / 3;
	// for (int i = 3 * r; i < 3 * r + 3; i++) {
	// for (int j = 3 * c; j < 3 * c + 3; j++) {
	// if (candidates.contains(board[i][j])) {
	// candidates.remove(board[i][j]);
	// }
	// }
	// }
	// return candidates;
	//
	// }

	public static ArrayList<Coordinate> getCandidates(char[][] board, int row,
			int column) {
		HashSet<Character> candidates = new HashSet<Character>();
		ArrayList<Coordinate> slots = new ArrayList<Coordinate>();
		for (char c = '1'; c <= '9'; c++) {
			candidates.add(c);
		}
		for (int i = 0; i < board[0].length; i++) {
			if (candidates.contains(board[row][i])) {
				candidates.remove(board[row][i]);
			}
		}

		for (int i = 0; i < board.length; i++) {
			if (candidates.contains(board[i][column])) {
				candidates.remove(board[i][column]);
			}
		}
		int r = row / 3;
		int c = column / 3;
		for (int i = 3 * r; i < 3 * r + 3; i++) {
			for (int j = 3 * c; j < 3 * c + 3; j++) {
				if (candidates.contains(board[i][j])) {
					candidates.remove(board[i][j]);
				}
			}
		}
		for (Character content : candidates) {
			Coordinate coordinate = new Coordinate(row, column, content);
			slots.add(coordinate);
		}
		return slots;

	}

	private static class Coordinate {
		int row;
		int column;
		char candidate;

		public Coordinate(int r, int c, char can) {
			row = r;
			column = c;
			candidate = can;
		}

		public int getRow() {
			return row;
		}

		public int getColumn() {
			return column;
		}

		public char getCandidate() {
			return candidate;
		}
	}

	public static void printBoard(char[][] board) {
		for (int i = 0; i < 9; i++) {
			System.out.println(Arrays.toString(board[i]));
		}
	}

	public static void main(String[] args) {
		char[][] board = new char[9][9];
		String[] lines = new String[9];
		lines[0] = "53..7....";
		lines[1] = "6..195...";
		lines[2] = ".98....6.";
		lines[3] = "8...6...3";
		lines[4] = "4..8.3..1";
		lines[5] = "7...2...6";
		lines[6] = ".6....28.";
		lines[7] = "...419..5";
		lines[8] = "....8..79";
		for (int i = 0; i < 9; i++) {
			board[i] = lines[i].toCharArray();
		}
		printBoard(board);
		isValidSudoku(board);

	}
}
