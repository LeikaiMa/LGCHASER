package textJustification;

import java.util.ArrayList;

public class ThreeCases {
    public ArrayList<String> fullJustify(String[] words, int L) {
        ArrayList<String> results = new ArrayList<String>();
        if (words.length == 0) {
            return results;
        }
        
        int lastI = 0;
        int count = 1;
        int len = words[0].length();
        int i = 1;
        
        while (i <= words.length) {
            if (i == words.length || (len + words[i].length() + count) > L ) {
                StringBuffer sb = new StringBuffer();
                if (i == words.length) {
                    for (int index = lastI; index < i; index++) {
                        sb.append(words[index]);
                        if (index != i - 1) {
                            sb.append(' ');
                        }
                    }
                    addSpace(sb, L - len - count + 1);
                    results.add(sb.toString());
                } else if (count == 1) {
                    sb.append(words[lastI]);
                    addSpace(sb, L - len);
                    lastI = i;
                    count = 1;
                    len = words[i].length();
                    results.add(sb.toString());
                } else {
                    int spaceLeft = L - len;
                    int nSpace = spaceLeft / (count - 1);
                    int extraSpace = spaceLeft % (count - 1);
                    for (int index = lastI; index < i; index++) {
                        sb.append(words[index]);
                        if (index != i - 1) {
                            addSpace(sb, nSpace);
                            if (index - lastI < extraSpace) {
                                sb.append(' ');
                            }
                        }
                    }
                    results.add(sb.toString());
                    lastI = i;
                    count = 1;
                    len = words[i].length();
                }
                i++;
            } else {
                count++;
                len += words[i].length();
                i++;
            }
        }
        
        return results;
        
    }
    
    
    private void addSpace(StringBuffer sb, int n) {
        for (int i = 0; i < n; i++) {
            sb.append(' ');
        }
    }
}
