package distinctSubsequences;

import java.util.ArrayList;
import java.util.SortedSet;
import java.util.TreeSet;

public class DPSolution {
	public int numDistinct(String S, String T) {
		if (S.length() < T.length()) {
			return 0;
		}

		if (T.length() == 0 && S.length() != 0) {
			return 1;
		}

		if (T.length() == 0 && S.length() == 0) {
			return 1;
		}
		ArrayList<TreeSet<Integer>> tArrayList = new ArrayList<TreeSet<Integer>>();
		for (int i = 0; i < T.length(); i++) {
			tArrayList.add(new TreeSet<Integer>());
		}
		for (int i = 0; i < T.length(); i++) {
			for (int j = 0; j < S.length(); j++) {
				if (T.charAt(i) == S.charAt(j)) {
					tArrayList.get(i).add(j);
				}
			}
		}
		if (tArrayList.size() == 1) {
			return tArrayList.get(0).size();
		}
		int num = numDistinctHelper(tArrayList, 1, tArrayList.get(0).tailSet(0));
		return num;
	}

	private int numDistinctHelper(ArrayList<TreeSet<Integer>> tArrayList,
			int start, SortedSet<Integer> subT) {
		if (start == tArrayList.size() - 1) {
			return subT.size();
		} else if (subT.size() == 0) {
			return 0;
		} else {
			int result = 0;
			for (int i : subT) {
				SortedSet<Integer> nextT = tArrayList.get(start).tailSet(
						i + 1);
				result += numDistinctHelper(tArrayList, start + 1, nextT);
			}
			return result;
		}
	}

	public static void main(String[] args) {
		String S = "ABCDE";
		String T = "AEC";
		// String S = "rabbbit";
		// String T = "rabbit";
		// String S = "aacaacca";
		// String T = "ca";
		System.out.println(new DPSolution().numDistinct(S, T));
	}
}
