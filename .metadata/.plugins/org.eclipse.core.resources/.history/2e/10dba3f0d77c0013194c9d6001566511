package wordBreakII;

import java.util.ArrayList;
import java.util.Set;

public class StoreStartAndLength {
    public ArrayList<String> wordBreak(String s, Set<String> dict) {
        ArrayList<String> result = new ArrayList<String>();
        
        boolean[][] dp = new boolean[s.length()][s.length() + 1];
        
        for (int len = 1; len <= s.length(); len++) {
            for (int i = 0; i < s.length() - len; i++) {
                int start = i;
                int end = i + len;
                
                if (dict.contains(s.substring(start, end))) {
                    dp[i][len] = true;
                } else {
                    for (int k = 1; k < len; k++) {
                        if (dp[i][k] && dp[i + k][len - k]) {
                            dp[i][len] = true;
                            break;
                        }
                    }
                }
            }
        }
        
        if (dp[0][s.length()]) {
            StringBuffer sb = new StringBuffer();
            helper(result, dp, s, 0, sb, dict);
        } 
        
        return result;
    }
    
    private void helper(ArrayList<String> result, boolean[][] dp, String s, int start, StringBuffer sb, Set<String> dict) {
        if (start == dp.length) {
            result.add(sb.substring(0, sb.length() - 1));
        } else {
            for (int i = 1; i <= dp.length - start; i++) {
                if (dp[start][i]) {
                    String left = s.substring(start, start + i);
                    if (dict.contains(left)) {
                        if (i != dp.length - start && !dp[start + i][dp.length - start - i]) {
                            continue;
                        }
                        
                        int lastIndex = sb.length();
                        sb.append(left + " ");
                        helper(result, dp, s, start + i, sb, dict);
                        sb.delete(lastIndex, sb.length());
                    }
                }
            }
        }
    }
}
