package findKthSmallest;

import java.util.Random;

public class QuickSelection {
	public int quickSelect(int[] G, int k) {
		return quickSelect(G, 0, G.length - 1, k - 1);
	}

	private int quickSelect(int[] G, int first, int last, int k) {
		if (first <= last) {
			int pivot = partition(G, first, last);
			if (pivot == k) {
				return G[k];
			}
			
			if (pivot > k) {
				return quickSelect(G, first, pivot - 1, k);
			}
			return quickSelect(G, pivot + 1, last, k);
		}
		
		return Integer.MIN_VALUE;
	}

	private int partition(int[] G, int first, int last) {
		int pivot = first + new Random().nextInt(last - first + 1);
		swap(G, last, pivot);
		
		for (int i = first; i < last; i++) {
			if (G[i] > G[last]) {
				swap(G, i, first);
				first++;
			}
		}
		swap(G, first, last);
		return first;
	}
	
	
//	public int findKthSmallest(int[] a, int k) {
//		int value = 0;
//		int n = a.length;
//		int c = 5;
//
//		while (true) {
//			int pivot = FindPivot(a, n, c);
//			
//			int[] count = new int[2];
//
//			countElements(a, n, pivot, count);
//		}
//	}
//
//	private void countElements(int[] a, int n, int pivot, int[] count) {
//		
//	}
//
//	private int FindPivot(int[] a, int n, int c) {
//		while (n > 1) {
//			int pos = 0;
//			int tmp = 0;
//
//			for (int start = 0; start < n; start += c) {
//				int end = start + c;
//				if (end > n) {
//					end = n;
//				}
//
//				for (int i = start; i < end - 1; i++) {
//					for (int j = i + 1; j < end; j++) {
//						if (a[j] < a[i]) {
//							tmp = a[i];
//							a[i] = a[j];
//							a[j] = tmp;
//						}
//					}
//				}
//
//				end = (start + end) / 2;
//				tmp = a[end];
//				a[pos++] = tmp;
//			}
//
//			n = pos;
//		}
//		return a[0];
//	}
//	http://www.sysexpand.com/?path=exercises/kth-smallest
}
