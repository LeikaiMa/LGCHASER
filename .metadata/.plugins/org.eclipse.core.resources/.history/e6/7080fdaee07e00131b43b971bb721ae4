package convertSortedListToBinarySearchTree;

public class ReturnNextPointerAndParentTreeNode {
	public TreeNode sortedListToBST(ListNode head) {
		if (head == null) {
			return null;
		}

		int len = 0;
		ListNode p = head;
		while (p != null) {
			len++;
			p = p.next;
		}

		return helper(head, 0, len - 1).t;
	}

	public class Element {
		public ListNode l;
		public TreeNode t;

		public Element(ListNode listNode, TreeNode treeNode) {
			l = listNode;
			t = treeNode;
		}
	}

	public Element helper(ListNode l, int start, int end) {
		if (start > end) {
			return new Element(l, null);
		}

		int mid = start + (end - start) / 2;
		Element left = helper(l, start, mid - 1);
		ListNode p = left.l;

		TreeNode parent = new TreeNode(p.val);
		parent.left = left.t;

		p = p.next;

		Element right = helper(p, mid + 1, end);
		parent.right = right.t;

		return new Element(right.l, parent);

	}
}
