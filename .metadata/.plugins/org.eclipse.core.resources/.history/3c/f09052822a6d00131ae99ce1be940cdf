package jumpGameII;

public class DP {
	public int jump(int[] A) {
		if (A == null || A.length == 0 || A.length == 1) {
			return 0;
		}
		int len = A.length;
//		int maxCover = A[0];
//		if (maxCover >= len - 1) {
//			return 1;
//		}
int maxCover = 0;

		int i = 0;
		int jump = 0;
		while (true) {
			jump++;
			int newMaxCover = 0;
			for (; i <= maxCover; i++) {
				newMaxCover = Math.max(maxCover, i + A[i]);
				if (newMaxCover >= len - 1) {
					return jump;
				}
			}
			if (newMaxCover > maxCover) {
				maxCover = newMaxCover;
			} else {
				break;
			}
		}
		return -1;
	}
}
