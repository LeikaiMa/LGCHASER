package restoreIPAddress;

import java.util.ArrayList;

public class DFSRecursive {
	public ArrayList<String> restoreIpAddresses(String s) {
		ArrayList<String> ips = new ArrayList<String>();
		if (s == null || s.length() < 4) {
			return null;
		}
		ArrayList<String> pieces = new ArrayList<String>();
		restoreIpAddressesHelper(ips, s, pieces, 0, 1);
		return ips;
	}

	private void restoreIpAddressesHelper(ArrayList<String> ips, String s,
			ArrayList<String> pieces, int index, int depth) {
		if (depth == 5 && index != s.length()) {
			return;
		} else if (depth == 5 && index == s.length()) {
			StringBuffer sb = new StringBuffer();
			for (String piece : pieces) {
				sb.append(piece);
				sb.append(".");
			}

			ips.add(sb.substring(0, sb.length() - 1));
		} else {
			for (int i = 1; i <= 3; i++) {
				String partIp = s.substring(index, index + i);
				int ip = Integer.valueOf(partIp);
				if (ip >= 0 && ip <= 255) {
					pieces.add(partIp);
					restoreIpAddressesHelper(ips, s, pieces, index + i,
							depth + 1);
					pieces.remove(pieces.size() - 1);
				}
			}

		}

	}
}
