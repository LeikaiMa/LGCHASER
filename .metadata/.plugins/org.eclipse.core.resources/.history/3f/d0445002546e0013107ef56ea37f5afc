package oneWordATime;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
// 从一个单词每次变换一个字母，这个字母必须是字典里面的，最终到达另一个单词。
// 展开来看，就是一个单词后面有很多种途径，然后展开一直到目的地的单词，整个展开像一张图，然后走最短的路径。
// 这时候就可以用BST， 在BST中主要是一个QUEUE，在QUEUE 全部结束后还没有找到想要的就说明没有这种情况，返回的是null
// 如果是要算depth 就要用两个queue 之间做一个轮换，将一个queue 全部排解完，把结果存到一个tmp的queue里面，然后这个queue 全部结束。之后进行轮换。
// 如果不需要算总共的depth，就可以直接取一个，然后将符合的直接塞到这个queue 里面。
// 
public class BackTrackBST {
	LinkedList<String> transform(String startWord, String stopWord, Set<String> dictionary) {
		startWord = startWord.toUpperCase();
		stopWord = stopWord.toUpperCase();
		Queue<String> actionQueue = new LinkedList<String>();
		Set<String> visitedSet= new HashSet<String>();
		Map<String, String> backtrackMap = new TreeMap<String, String>();
		
		actionQueue.add(startWord);
		visitedSet.add(startWord);
		
		while (!actionQueue.isEmpty()) {
			String w = actionQueue.poll();
			for (String v: getOneEditWords(w)) {
				if (v.equals(stopWord)) {
					LinkedList<String> list = new LinkedList<String>();
					list.add(v);
					while (w != null) {
						list.add(0, w);
						w = backtrackMap.get(w);
					}
					return list;
				}
				
				if (dictionary.contains(v)) {
					if (!visitedSet.contains(v)) {
						actionQueue.add(v);
						visitedSet.add(v);
						backtrackMap.put(v, w);
					}
				}
			}
		}
		return null;
		
	}
	
	Set<String> getOneEditWords(String word) {
		Set<String> words = new TreeSet<String>();
		for (int i = 0; i < word.length(); i++) {
			char[] wordArray = word.toCharArray();
			for (char c = 'A'; c <= 'Z'; c++) {
				if (c != word.charAt(i)) {
					wordArray[i] = c;
					words.add(new String(wordArray));
				}
			}
		}
		return words;
	}
}
