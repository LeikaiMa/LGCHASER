package substringWithConcatenationOfAllWords;

import java.util.ArrayList;
import java.util.HashMap;

public class DPWithHashMap {
	public ArrayList<Integer> findSubstring(String S, String[] L) {
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		if (S == null || S.length() == 0 || L == null || L.length == 0) {
			return indexes;
		}
		HashMap<String, Integer> words = new HashMap<String, Integer>();
		for (int i = 0; i < L.length; i++) {
			words.put(L[i], i);
		}
		int len = L[0].length();
		int[] dp = new int[S.length() - len + 1];
		createDP(dp, S, L, len, words);
		for (int i = 0; i < (S.length() - len * L.length + 1))

	}

	private void createDP(int[] dp, String S, String[] L, int len,
			HashMap<String, Integer> words) {
		for (int i = 0; i < dp.length; i++) {
			String s = S.substring(i, i + len);
			if (words.containsKey(s)) {
				dp[i] = words.get(s);
			} else {
				dp[i] = -1;
			}
		}
	}

}
