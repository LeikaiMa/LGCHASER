package bestTimeToBuyAndSellStockIII;
// 这个思路比较清楚，因为只能够有至多两次完整的记录，而且不能相交叉，必须有先后次序，所以应该想到是将整个时间段分成两部分，因为在一天可以卖了之后再买所以两个可以在同一天。
// 总共的收益是两边的和 然后从里面取最大值。
// 如何取分别去两边不同的range最大的收益，最简单是是先0-i 然后i - (n-1)不过这样的话复杂度会达到 n^2 
// http://blog.csdn.net/fightforyourdream/article/details/14503469
public class BetterSolution {
	public static int maxProfit(int[] prices) {
		if (prices.length == 0) {
			return 0;
		}

		int max = 0;
		int[] left = new int[prices.length];
		int[] right = new int[prices.length];

		process(prices, left, right);

		for (int i = 0; i < prices.length; i++) {
			max = Math.max(max, left[i] + right[i]);
		}

		return max;
	}

	private static void process(int[] prices, int[] left, int[] right) {
		left[0] = 0;
		int min = prices[0];

		for (int i = 1; i < left.length; i++) {
			left[i] = Math.max(left[i - 1], prices[i] - min);
			min = Math.min(prices[i], min);
		}

		right[prices.length - 1] = 0;
		int max = prices[prices.length - 1];

		for (int i = prices.length - 2; i >= 0; i--) {
			right[i] = Math.max(right[i + 1], max - prices[i]);
			max = Math.max(prices[i], max);
		}

	}

	public static void main(String[] args) {
		// int[] prices = {3,3,5,0,0,3,1,4};
		// int[] prices = {2,1,2,0,1};
		int[] prices = { 1, 2 };
		System.out.println(maxProfit(prices));
	}
}
