package largestSumMatrix;

public class DPSum {
	int[][] precomputeMatrix(int[][] matrix) {
		int[][] sumMatrix = new int[matrix.length][matrix[0].length];
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[0].length; j++) {
				if (i == 0 && j == 0) {
					sumMatrix[i][j] = matrix[i][j];
				} else if (j == 0) {
					sumMatrix[i][j] = sumMatrix[i - 1][j] + sumMatrix[i][j];
				} else if (i == 0) {
					sumMatrix[i][j] = sumMatrix[i][j - 1] + sumMatrix[i][j];
				} else {
					sumMatrix[i][j] = sumMatrix[i - 1][j] + sumMatrix[i][j - 1]
							- sumMatrix[i - 1][j - 1] + sumMatrix[i][j];
				}
			}
		}
		return sumMatrix;
	}
	
	int getMaxMatrix(int[][] original) {
		int maxArea = Integer.MIN_VALUE;
		int rowCount = original.length;
		int columnCount = original[0].length;
		int[][] matrix = precomputeMatrix(original);
		for (int row1 = 0; row1 < rowCount; row1++) {
			for (int row2 = row1; row2 < rowCount; row2++) {
				for (int col1 = 0; col1 < columnCount; col1++) {
					for (int col2 = 0; col2 < columnCount; col2++) {
						maxArea = Math.max(maxArea, computeSum(matrix, row1, row2, col1, col2));
					}
				}
			}
		}
		return maxArea;
	}

	private int computeSum(int[][] matrix, int i1, int i2, int j1,
			int j2) {
		
		return 0;
	}
}
