package wordBreak;

import java.util.HashMap;
import java.util.Set;

public class Recursive {
	public static boolean wordBreak(String s, Set<String> dict) {
		if (dict.isEmpty()) {
			return false;
		}
	
		HashMap<String, Boolean> map = new HashMap<String, Boolean>();
		for (String word: dict) {
			map.put(word, true);
		}
		
		return wordBreakHelper(s, map);
		
	}

	private static boolean wordBreakHelper(String s, HashMap<String, Boolean> map) {
		if (map.get(s)) {
			return true;
		}
		
		for (int i = 1; i < s.length(); i++) {
			String left = s.substring(0, i);
			String right = s.substring(i);
			if (map.get(left) && wordBreakHelper(right, map)) {
				return true;
			}
		}
		map.put(s, false);
		return false;
	}
}
