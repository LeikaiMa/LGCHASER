package medianValue;

import java.util.Comparator;
import java.util.PriorityQueue;

public class MaxMinHeap {
	private Comparator<Integer> maxHeapComparator;
	private Comparator<Integer> minHeapComparator;
	private PriorityQueue<Integer> maxHeap, minHeap;

	public void addNewNumber(int randomNumber) {
		if (maxHeap.size() >= minHeap.size()) {
			if ((minHeap.peek() != null) && randomNumber > minHeap.peek()) {
				maxHeap.offer(minHeap.poll());
				minHeap.offer(randomNumber);
			} else {
				maxHeap.offer(randomNumber);
			}
		} else {
			if (randomNumber < maxHeap.peek()) {
				minHeap.offer(maxHeap.poll());
				maxHeap.offer(randomNumber);
			} else {
				minHeap.offer(randomNumber);
			}
		}
	}

	public double getMedian() {
		if (maxHeap.isEmpty()) {
			return 0;
		}

		if (maxHeap.size() == minHeap.size()) {
			return ((double) minHeap.peek() + (double) maxHeap.peek()) / 2;
		} else {
			return maxHeap.peek();
		}
		
		
	}
}
