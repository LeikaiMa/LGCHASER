package surroundedRegions;

public class SurroundedRegions {
	public static int row;
	public static int column;

	public void solve(char[][] board) {
		if (board == null) {
			return;
		}
		row = board.length;
		column = board[0].length;
		boolean[][] visited = new boolean[row][column];
		for (int i = 0; i < column; i++) {
			if (board[0][i] == 'O' && !visited[0][i]) {
				visit(0, i, board, visited);
			}
			if (board[row - 1][i] == 'O' && !visited[row - 1][i]) {
				visit((row - 1), i, board, visited);
			}
		}

		for (int i = 0; i < row; i++) {
			if (board[i][0] == 'O' && !visited[i][0]) {
				visit(i, 0, board, visited);
			}
			if (board[i][row - 1] == 'O' && !visited[i][row - 1]) {
				visit(i, (row - 1), board, visited);
			}
		}
	}

	public void visit(int r, int c, char[][] board, boolean[][] visited) {
		visited[r][c] = true;
		if ((r - 1) >= 0 && board[r - 1][c] == 'O' && !visited[r - 1][c]) {
			visit((r - 1), c, board, visited);
		}
		if ((r + 1) < row && board[r + 1][c] == 'O' && !visited[r + 1][c]) {
			visit((r + 1), c, board, visited);
		}

		if ((c - 1) >= 0 && board[r][c - 1] == 'O' && !visited[r][c - 1]) {
			visit(r, (c - 1), board, visited);
		}
		if ((c + 1) < column && board[r][c + 1] == 'O' && !visited[r][c + 1]) {
			visit(r, (c + 1), board, visited);
		}
	}
}
