package linkedListCycleI;
// II
//这个本质就是同时跑的情况下，跑的快的会不会和跑的慢再次相遇
public class SlowCatchesFast {
	public static  boolean hasCycle(ListNode head) {
        if (head == null /*|| head.next == null*/) {
            return false;
        }
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow.equals( fast)) {
                return true;
            }
        }
        
        return false;
    }
	public static void main(String[] args) {
		ListNode l1 = new ListNode(-1);
		l1.next = l1;
		System.out.println(hasCycle(l1));
	}
	
}
