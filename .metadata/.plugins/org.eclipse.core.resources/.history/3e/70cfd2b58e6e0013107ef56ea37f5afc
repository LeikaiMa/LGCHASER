package rectangleTrie;
// trie 为了看prefix 是否存在，里面有自身的character 和一系列的children 作为连接之后的node
// 里面判断这个是不是这边是不是一个单词的结束，所以有一个terminate 来看是否是最后结束的标志
// 如果要加一个word 首先判断这个word 是不是存在或者是不是空的。
// 然后开始找哪个child 是现在这个第一个单词，如果不存在，就新建一个加到children 的list 里面。
// 如果存在
import java.util.LinkedList;

public class TrieNode {
	private LinkedList<TrieNode> children;
	private boolean terminates = false;

	private char character;

	public TrieNode() {
		children = new LinkedList<TrieNode>();
	}

	public TrieNode(char character) {
		this();
		this.character = character;
	}

	public char getChar() {
		return character;
	}

	public void addWord(String word) {
		if (word == null || word.isEmpty()) {
			return;
		}

		TrieNode child;
		char firstChar = word.charAt(0);

		TrieNode t = getChild(firstChar);

		if (t == null) {
			child = new TrieNode(firstChar);
			children.add(child);
		} else {
			child = t;
		}

		if (word.length() > 1) {
			child.addWord(word.substring(1));
		} else {
			child.setTerminates(true);
		}

	}

	TrieNode getChild(char c) {
		for (TrieNode t : children) {
			if (t.getChar() == c) {
				return t;
			}
		}
		return null;
	}

	public boolean terminates() {
		return terminates;
	}

	public void setTerminates(boolean t) {
		terminates = t;
	}
}
