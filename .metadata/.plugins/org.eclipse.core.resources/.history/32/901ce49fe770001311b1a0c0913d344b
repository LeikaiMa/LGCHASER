package editDistance;

import java.util.ArrayList;
import java.util.HashSet;

public class BFSAndHashmap {
	public int minDistance(String word1, String word2) {
		if (word1 == null || word1 == null) {
			return 0;
		}

		if (word1.length() == 0) {
			return word2.length();
		}
		if (word2.length() == 0) {
			return word1.length();
		}

		if (word1.equals(word2)) {
			return 0;
		}

		word1 = word1.toLowerCase();
		word2 = word2.toLowerCase();
		HashSet<String> visited = new HashSet<String>();
		visited.add(word1);
		ArrayList<String> arrayList = new ArrayList<String>();
		arrayList.add(word1);

		int step = -1;

		while (!arrayList.isEmpty()) {
			step++;
			ArrayList<String> tmp = new ArrayList<String>();
			for (String s : arrayList) {
				if (s.equals(word2)) {
					return step;
				} else {
					int len1 = word1.length();
					int len2 = word2.length();
					if (len1 < len2) {
						insertChar(word1, word2, tmp, visited);
					} else if (len1 == len2) {
						replaceChar(word1, word2, tmp, visited);
					} else {
						deleteChar(word1, word2, tmp, visited);
					}
				}
			}
			arrayList = tmp;
		}
		return -1;
	}

	private void deleteChar(String word1, String word2, ArrayList<String> tmp,
			HashSet<String> visited) {
		int i = 0;
		for (; i < word2.length(); i++) {
			if (word1.charAt(i) != word2.charAt(i)) {
				break;
			}
		}
		for (; i < word1.length(); i++) {
			StringBuffer sb = new StringBuffer();
			sb.append(word1.substring(0, i)).append(word1.substring(i + 1));
			String s = sb.toString();
			if (!visited.contains(s)) {
				tmp.add(s);
				visited.add(s);
			}
		}
	}

	private void replaceChar(String word1, String word2, ArrayList<String> tmp,
			HashSet<String> visited) {
		for (int i = 0; i < word1.length(); i++) {
			if (word1.charAt(i) == word2.charAt(i)) {
				continue;
			}
			char[] word = word1.toCharArray();
			word[i] = word2.charAt(i);
			String s = new String(word);
			if (!visited.contains(s)) {
				tmp.add(s);
				visited.add(s);
			}
		}

	}

	private void insertChar(String word1, String word2, ArrayList<String> tmp,
			HashSet<String> visited) {
		int i = 0;
		for (; i < word1.length(); i++) {
			if (word1.charAt(i) != word2.charAt(i)) {
				break;
			}
		}
		for (; i <= word1.length(); i++) {
			for (char c = 'a'; c <= 'z'; c++) {
				StringBuffer sb = new StringBuffer();
				sb.append(word1.substring(0, i)).append(c)
						.append(word1.substring(i));
				String s = sb.toString();
				if (!visited.contains(s)) {
					tmp.add(s);
					visited.add(s);
				}
			}
		}

	}
}
