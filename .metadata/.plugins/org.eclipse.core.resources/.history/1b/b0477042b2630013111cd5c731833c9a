package binaryTreeInorderTraversal;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Stack;

public class Iterative {

	public static ArrayList<Integer> InOderTraversal(TreeNode root) {
		ArrayList<Integer> arrayList = new ArrayList<Integer>();
		Stack<TreeNodeVisited> stack = new Stack<TreeNodeVisited>();
		if (root == null) {
			return arrayList;
		}
		if (root.right != null) {
			TreeNodeVisited r = new TreeNodeVisited(root.right, false);
			stack.push(r);
		}

		stack.push(new TreeNodeVisited(root, true));

		if (root.left != null) {
			stack.push(new TreeNodeVisited(root.left, false));
		}
		
		while (!stack.isEmpty()) {
			TreeNodeVisited node = stack.pop();
		}
		return arrayList;

	}

	public class TreeNodeVisited {
		TreeNode node;
		boolean visited;

		public TreeNodeVisited(TreeNode node, Boolean v) {
			this.node = node;
			visited = v;
		}
	}

	public static void main(String[] args) {
		TreeNode one = new TreeNode(1);
		TreeNode two = new TreeNode(2);
		TreeNode three = new TreeNode(3);
		one.right = two;
		two.left = three;
		ArrayList<Integer> inOderTraversal = InOderTraversal(one);
		System.out.println(inOderTraversal.toString());
	}
}
