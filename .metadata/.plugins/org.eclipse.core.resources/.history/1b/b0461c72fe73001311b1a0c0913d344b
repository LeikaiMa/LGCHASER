package longestValidParentheses;

import java.util.Stack;

public class UseStack {
	public static int longestValidParentheses(String s) {
		if (s == null || s.length() == 0 || s.length() == 1) {
			return 0;
		}
		Stack<Character> paren = new Stack<Character>();
		Stack<Integer> index = new Stack<Integer>();
		Stack<Integer> length = new Stack<Integer>();
		int Xmax = 0;
		int max = 0;
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c == '(') {
				paren.push(c);
				index.push(i);
				length.push(0);
			} else {
				if (paren.isEmpty() || paren.peek() == ')') {
					paren.push(c);
					max = 0;
				} else {
					paren.pop();
					max += 2;
				}
			}
		}

		Xmax = Math.max(Xmax, max);
		return Xmax;
	}

	public static void main(String[] args) {
		System.out.println(longestValidParentheses(")()())") == 4);
		System.out.println(longestValidParentheses("()(()") == 2);
		System.out.println(longestValidParentheses("()(())") == 6);
	}

}
