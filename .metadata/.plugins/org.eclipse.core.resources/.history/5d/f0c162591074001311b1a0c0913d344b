package longestValidParentheses;

public class DP {
	public static int longestValidParentheses(String s) {
		if (s == null || s.length() == 0 || s.length() == 1) {
			return 0;
		}

		int[] dp = new int[s.length()];
		int max = 0;
		int len = s.length();
		for (int i = len - 2; i >= 0; i--) {
			int j = i + 1 + dp[i + 1];
			if (j < len) {
				dp[i] = dp[i + 1] + 2;
				if (j + 1 < len) {
					dp[i] += dp[j + 1];
				}
				max = Math.max(dp[i], max);
			}
		}
		
		return max;
	}
	
	public static void main(String[] args) {
		System.out.println(longestValidParentheses(")()())") == 4);
		System.out.println(longestValidParentheses("()(()") == 2);
		System.out.println(longestValidParentheses("()(())") == 6);
	}
}
