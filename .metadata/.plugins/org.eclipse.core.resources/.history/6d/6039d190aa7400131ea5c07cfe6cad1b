package validBinarySearchTree;

public class DFS {
	public boolean isValidBST(TreeNode root) {
		if (root == null) {
			return true;
		}

		TreeNode leftNode = root.left;
		TreeNode rightNode = root.right;
		if (root.left != null) {
			if (root.val <= leftNode.val) {
				return false;
			}
		}

		if (root.right != null) {
			if (root.val >= rightNode.val) {
				return false;
			}
		}

		if (!isValidBSTLeftHelper(root.left, root.val)
				|| !isValidBSTRightHelper(root.right, root.val)) {
			return false;
		}
		return true;
	}

	private boolean isValidBSTRightHelper(TreeNode root, int left) {
		if (root == null) {
			return true;
		}

		TreeNode leftNode = root.left;
		TreeNode rightNode = root.right;
		if (root.left != null) {
			if (root.val <= leftNode.val || leftNode.val <= left) {
				return false;
			}
		}

		if (root.right != null) {
			if (root.val >= rightNode.val) {
				return false;
			}
		}
		if (!isValidBSTLeftHelper(root.left, root.val)
				|| !isValidBSTRightHelper(root.right, root.val)) {
			return false;
		}
		return true;
	}

	private boolean isValidBSTLeftHelper(TreeNode root, int right) {
		if (root == null) {
			return true;
		}

		TreeNode leftNode = root.left;
		TreeNode rightNode = root.right;
		if (root.left != null) {
			if (root.val <= leftNode.val) {
				return false;
			}
		}

		if (root.right != null) {
			if (root.val >= rightNode.val || rightNode.val >= right) {
				return false;
			}
		}
		if (!isValidBSTLeftHelper(root.left, root.val)
				|| !isValidBSTRightHelper(root.right, root.val)) {
			return false;
		}
		return true;
	}
	
	
	public static void main(String[] args) {
		TreeNode t1 = new TreeNode(10);
		TreeNode t2 = new TreeNode(5);
		TreeNode t3 = new TreeNode(15);
		TreeNode t4 = new TreeNode(6);
		TreeNode t5 = new TreeNode(20);
		
		
	}
}
