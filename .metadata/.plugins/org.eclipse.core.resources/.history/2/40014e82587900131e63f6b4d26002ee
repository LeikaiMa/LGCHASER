package palindromePartitionI;

import java.util.ArrayList;

public class Expand {
	public ArrayList<ArrayList<String>> partition(String s) {
		ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();
		if (s == null || s.isEmpty()) {
			return results;
		}

		ArrayList<String> result = new ArrayList<String>();
		boolean[][] dp = new boolean[s.length()][s.length()];

		for (int i = 0; i < s.length(); i++) {
			for (int span = 0; span <= Math.min(i, s.length() - 1 - i); span++) {
				int l = i - span;
				int h = i + span;
				if (s.charAt(l) == s.charAt(h)) {
					dp[l][h] = true;
				} else {
					break;
				}
			}
		}

		for (int i = 0; i < s.length(); i++) {
			for (int span = 0; span <= Math.min(i, s.length() - 1 - i - 1); span++) {
				int l = i - span;
				int h = i + 1 + span;
				if (s.charAt(l) == s.charAt(h)) {
					dp[l][h] = true;
				} else {
					break;
				}
			}
		}

		helper(results, result, dp, 0, s);

		return results;
	}

	public void helper(ArrayList<ArrayList<String>> results,
			ArrayList<String> result, boolean[][] dp, int i, String s) {
		if (i == dp.length) {
			results.add(new ArrayList<String>(result));
		} else {
			for (int j = i; j < dp.length; j++) {
				if (dp[i][j]) {
					result.add(s.substring(i, j + 1));
					helper(results, result, dp, j + 1, s);
					result.remove(result.size() - 1);
				}
			}
		}
	}
}
