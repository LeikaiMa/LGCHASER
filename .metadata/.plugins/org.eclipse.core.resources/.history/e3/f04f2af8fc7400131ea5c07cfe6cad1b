package wordSearch;

public class DFS {
	public boolean exist(char[][] board, String word) {
		if (word == null || word.isEmpty()) {
			return true;
		}
		int row = board.length;
		int column = board[0].length;
		boolean[][] visited = new boolean[row][column];
		char c = word.charAt(0);
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				if (c == board[i][j]) {
					visited[i][j] = true;
					if (existHelper(board, visited, i, j, word, 1)) {
						return true;
					}
					visited[i][j] = false;
				}
			}
		}
		return false;
	}

	private boolean existHelper(char[][] board, boolean[][] visited, int i,
			int j, String word, int index) {
		if (index == word.length()) {
			return true;
		}
		int row = board.length;
		int column = board[0].length;
		char c = word.charAt(index);
		if (i - 1 >= 0 && !visited[i - 1][j] && c == board[i - 1][j]) {
			visited[i - 1][j] = true;
			if (existHelper(board, visited, i - 1, j, word, index + 1)) {
				return true;
			}
			visited[i - 1][j] = false;

		}

		return false;
	}
}
