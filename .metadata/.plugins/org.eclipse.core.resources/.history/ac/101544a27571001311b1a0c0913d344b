package subSetII;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Recursive {
	public static ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
		ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
		if (num == null || num.length == 0) {
			return results;
		}
		Arrays.sort(num);
		ArrayList<Integer> numbers = new ArrayList<Integer>();
		for (int i : num) {
			numbers.add(i);
		}
		Collections.reverse(numbers);
		int[] total = new int[1];
		results = subSetsWithDupHelper(numbers, 0, total);
		return results;
	}

	private static ArrayList<ArrayList<Integer>> subSetsWithDupHelper(
			ArrayList<Integer> numbers, int depth, int[] total) {
		ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
		if (depth == numbers.size()) {
			ArrayList<Integer> r = new ArrayList<Integer>();
			results.add(r);
			return results;
		} else {
			ArrayList<ArrayList<Integer>> tmp = subSetsWithDupHelper(numbers,
					depth + 1, total);
			if (depth < numbers.size() - 1 && numbers.get(depth) == numbers.get(depth + 1)) {
				total[0] ++;
			} else {
				total[0] = 1;
			}
			results.addAll(tmp);
			if (total[0] == 1) {
				for (ArrayList<Integer> t : tmp) {
					ArrayList<Integer> r = new ArrayList<Integer>(t);
					r.add(numbers.get(depth));
					results.add(r);
				}
			} else {
				for (ArrayList<Integer> t : tmp) {
					if (t.size() > total[0] && t.get(t.size() - total[0] + 1) != numbers.get(depth)) {
						continue;
					}
					ArrayList<Integer> r = new ArrayList<Integer>(t);
					r.add(numbers.get(depth));
					results.add(r);
				}
			}
			return results;
		}

	}

	public static void main(String[] args) {
//		int[] num = { 4,1,0 };
		int[] num = { 5,5,5,5,5 };
		ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
		results = subsetsWithDup(num);
		for (ArrayList<Integer> r : results) {
			System.out.println(r);
		}
	}
}
