package distinctSubsequences;

public class OnePassDP {
	public int numDistinct(String S, String T) {
		if (S.length() < T.length()) {
			return 0;
		}

		if (T.length() == 0 && S.length() != 0) {
			return 1;
		}

		if (T.length() == 0 && S.length() == 0) {
			return 1;
		}

		int[][] dp = new int[T.length() + 1][S.length() + 1];
		for (int i = 0; i <= S.length(); i++) {
			dp[0][i] = 1;
		}
		for (int i = 1; i <= T.length(); i++) {
			dp[i][0] = 0;
		}
		for (int i = 1; i <= T.length(); i++) {
			for (int j = 1; j <= S.length(); j++) {
				dp[i][j] = dp[i][j - 1];
				if (T.charAt(i - 1) == S.charAt(j - 1)) {
				
					dp[i][j] += dp[i - 1][j - 1];
				}
			}
		}
		return dp[T.length()][S.length()];
	}
	
	public static void main(String[] args) {
//		String S = "ABCDE";
//		String T = "AEC";
//		 String S = "rabbbit";
//		 String T = "rabbit";
		 String S = "aacaacca";
		 String T = "ca";
		System.out.println(new OnePassDP().numDistinct(S, T));
	}
}
