package substringWithConcatenationOfAllWords;

import java.util.ArrayList;
import java.util.HashMap;

public class DPWithHashMap {
	public static ArrayList<Integer> findSubstring(String S, String[] L) {
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		if (S == null || S.length() == 0 || L == null || L.length == 0) {
			return indexes;
		}
		HashMap<String, Times> words = new HashMap<String, Times>();
		int count = 0
		for (int i = 0; i < L.length; i++) {
			if (words.containsKey(L[i])) {
				words.get(L[i]).times++;
			} else {
				words.put(L[i], new Times(count++) );
			}
			
		}
		int len = L[0].length();
		int[] dp = new int[S.length() - len + 1];
		createDP(dp, S, L, len, words);
		for (int i = 0; i < (S.length() - len * L.length + 1); i++) {
			if (checkWord(i, dp, L.length, len)) {
				indexes.add(i);
			}
		}
		return indexes;

	}

	private static boolean checkWord(int start, int[] dp, int size, int len) {
		boolean[] dpb = new boolean[size];
		for (int i = 0; i < size; i++) {
			if (dp[start + len * i] == -1) {
				return false;
			} else if (dpb[dp[start + len * i]] == true) {
				return false;
			} else {
				dpb[dp[start + len * i]] = true;
			}
		}

		return true;
	}

	private static void createDP(int[] dp, String S, String[] L, int len,
			HashMap<String, Integer> words) {
		for (int i = 0; i < dp.length; i++) {
			String s = S.substring(i, i + len);
			if (words.containsKey(s)) {
				dp[i] = words.get(s);
			} else {
				dp[i] = -1;
			}
		}
	}
	
	public class Times {
		int index;
		int times;
		public Times(int i) {
			index = i;
			times = 1;
		}
	}
	
	public static void main(String[] args) {
//		String S = "barfoothefoobarman";
//		String[] L = {"foo", "bar"};
		
		String S = "lingmindraboofooowingdingbarrwingmonkeypoundcake";
		String[] L = {"fooo","barr","wing","ding","wing"};
		
		System.out.println(findSubstring(S, L));
	}

}
