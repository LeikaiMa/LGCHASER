package permutationSequence;

import java.util.ArrayList;

public class DP {
	public static String getPermutation(int n, int k) {
		int[] dp = new int[10];
		int total = 1;
		int digit = 9;
		for (int i = 1; i <= 9; i++) {
			total *= i;
			dp[i] = total;
		}
		ArrayList<Integer> numbers = new ArrayList<Integer>();
//		for (int i = 1; i < 10; i++) {
//			if (k > dp[i - 1] && k <= dp[i]) {
//				numbers.add(i);
//				digit = i;
//				break;
//			} else {
//				numbers.add(i);
//			}
//		}
		for (int i = 1; i <= n; i++) {
			numbers.add(i);
		}

		StringBuffer sb = new StringBuffer();

		for (int i = digit; i >= 2; i--) {
			int index = (k - 1) / dp[i - 1];
			sb.append(numbers.get(index));
			numbers.remove(index );
			k = k - dp[i - 1] * (index);
		}
		sb.append(numbers.get(0));
		return sb.toString();
	}

	public static void main(String[] args) {
		int n = 3;
		int k = 2;
		System.out.println(getPermutation(n, k));
	}
}
