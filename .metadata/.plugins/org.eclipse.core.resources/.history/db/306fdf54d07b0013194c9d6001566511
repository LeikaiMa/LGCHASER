package lruCache;

import java.util.LinkedHashMap;

public class LRUCache {
    int capacity;
    LinkedHashMap<Integer, Integer> map;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new LinkedHashMap<Integer, Integer>();
    }
    
    public int get(int key) {
        if (map.containsKey(key)) {
            int value = map.get(key);
            map.remove(key);
            map.put(key, value);
            return value;
        } else {
            return -1;
        }
    }
    
    public void set(int key, int value) {
        if (map.containsKey(key)) {
            map.remove(key);
            map.put(key, value);
        } else if (map.size() < capacity) {
            map.put(key, value);
        } else {
            int firstK = 0;
            for (Integer k : map.keySet()) {
                firstK = k;
                break;
            }
            
            map.remove(firstK);
            map.put(key, value);
        }
    }
}
