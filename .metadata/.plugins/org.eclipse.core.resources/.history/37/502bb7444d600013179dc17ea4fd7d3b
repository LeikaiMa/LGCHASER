package nQueens;

import java.util.ArrayList;

public class NQueens {
	// public static ArrayList<String[]> solveNQueens(int n) {
	// return null;
	// }
	//
	// public static void main(String[] args) {
	// int n = 4;
	//
	//
	// }

	public static ArrayList<String[]> permuation(int[] str, int first, int end, ArrayList<String[]> results) {
		// 输出str[first..end]的所有排列方式
		if (first == end) { // 输出一个排列方式
			if (checkQueen(str)) {
//				for (int j = 0; j <= end; j++) {
//					System.out.print(str[j]);
//				}
//				System.out.println();
				
				String[] board = loadPiece(str);
				results.add(board);
			}
		}

		for (int i = first; i <= end; i++) {
			swap(str, i, first);
			results = permuation(str, first + 1, end, results); // 固定好当前一位，继续排列后面的
			swap(str, i, first);
		}
		return results;
	}
	
	private static String[] loadPiece(int[] str) {
		int n = str.length;
		String[] board = new String[n];
		for (int i = 0; i < n; i++) {
			StringBuilder s = new StringBuilder();
			s.append("\"");
			for (int j = 0; j < n; j++) {
				if (j == (str[i]-1)) {
					s.append("Q");
				} else {
					s.append(".");
				}
			}
			s.append("\"");
			board[i] = s.toString();
		}
		return board;
	}

	private static boolean checkQueen(int[] str) {
		for (int i = 0; i < str.length - 1; i++) {
			for (int j = i + 1 ; j< str.length; j++) {
				if (((str[j] - str[i]) == (j - i) )|| ((str[j] - str[i]) ==(i- j))) {
					return false;
				}
			}
		}
		return true;
	}

	private static void swap(int[] str, int i, int first) {
		int tmp;
		tmp = str[first];
		str[first] = str[i];
		str[i] = tmp;
	}

	public static void main(String args[]) throws Exception {
		// int[] str = {1,2,3};
		int n = 7;
		int[] intArray = new int[n];
		for (int i = 0; i < n; i++) {
			intArray[i] = i;
		}
		// 输出str[0..2]的所有排列方式
		ArrayList<String[]> results = new ArrayList<>();
		results = permuation(intArray, 0, n - 1, results);
	}

}
