package provideLockNoDeadLock;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.locks.Lock;
// remove element 是直接将这个元素出现的第一次删除。
public class LockNode {
	public enum VisitState {
		FRESH, VISITING, VISITED
	};

	private ArrayList<LockNode> children;

	private int lockId;
	private Lock lock;
	private int maxLocks;

	public LockNode(int id, int max) {
		lockId = id;
		maxLocks = max;
	}

	public void JoinTo(LockNode node) {
		children.add(node);
	}

	public void remove(LockNode node) {
		children.remove(node);
	}
	
	public boolean hasCycle(HashMap<Integer, Boolean> touchedNodes) {
		VisitState[] visited = new VisitState[maxLocks];
	}
	
}
