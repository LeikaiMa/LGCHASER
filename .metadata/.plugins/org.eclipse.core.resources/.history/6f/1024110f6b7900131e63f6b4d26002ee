package minimumPathSum;

public class CompareLeftUp {
	public static int minPathSum(int[][] grid) {
		int[][] sum = new int[grid.length][grid[0].length];
		sum[0][0] = grid[0][0];

		for (int i = 1; i < grid.length; i++) {
			sum[i][0] = sum[i - 1][0] + grid[i][0];
		}

		for (int j = 1; j < grid[0].length; j++) {
			sum[0][j] = sum[0][j - 1] + grid[0][j];
		}

		for (int i = 1; i < grid.length; i++) {
			for (int j = 1; j < grid[0].length; j++) {
				sum[i][j] = Math.min(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
			}
		}

		return sum[grid.length - 1][grid[0].length - 1];
	}
	
	public static void main(String[] args) {
		 int[][] grid = new int[2][2];
		 grid[0][0] = 1;
		 grid[0][1] = 2;
		 grid[1][0] = 3;
		 grid[1][1] = 4;
//		int[][] grid = new int[3][3];
//		grid[0][0] = 1;
//		grid[0][1] = 3;
//		grid[0][2] = 1;
//		grid[1][0] = 1;
//		grid[1][1] = 5;
//		grid[1][2] = 1;
//		grid[2][0] = 4;
//		grid[2][1] = 2;
//		grid[2][2] = 1;
		int shortest;
		shortest = minPathSum(grid);
		System.out.println(shortest);
	}
}
