package surroundedSquare;

public class PreProcessing {
	Subsquare findSquare(int[][] matrix) {
		SquareCell[][] processed = processSquare(matrix);
		for (int i = matrix.length; i>= 1; i--) {
			
		}
	}

	SquareCell[][] processSquare(int[][] matrix) {
		SquareCell[][] processed = new SquareCell[matrix.length][matrix.length];

		for (int r = matrix.length - 1; r >= 0; r--) {
			for (int c = matrix.length - 1; c >= 0; c--) {
				int rightZeros = 0;
				int belowZeros = 0;

				if (matrix[r][c] == 0) {
					rightZeros++;
					belowZeros++;

					if (c + 1 < matrix.length) {
						SquareCell previous = processed[r][c + 1];
						rightZeros += previous.zerosRight;
					}
					
					if (r + 1 < matrix.length) {
						SquareCell previous = processed[r+1][c];
						belowZeros += previous.zerosBelow;
					}
				}
				processed[r][c] = new SquareCell(rightZeros, belowZeros);
			}
		}
		return processed;
	}
}
