package distinctSubsequences;

import java.util.Deque;
import java.util.LinkedList;

public class DistinctSubsequences {
	public static int numDistinct(String S, String T) {
		S = S.toLowerCase();
		T = T.toLowerCase();
		if (S.length() < T.length()) {
			return 0;
		}

		if (T.length() == 0 && S.length() != 0) {
			return 1;
		}

		if (T.length() == 0 && S.length() == 0) {
			return 1;
		}

		Deque<Character> s = new LinkedList<Character>();
		Deque<Integer> ns = new LinkedList<Integer>();
		Deque<Character> t = new LinkedList<Character>();
		Deque<Integer> nt = new LinkedList<Integer>();
		shrink(s, ns, S);
		shrink(t, nt, T);
		
		if (s.size() != t.size()) {
			return 0;
		}
		int result = 1;
		while (!s.isEmpty()) {
			if (s.poll() != t.poll()) {
				return 0;
			} else {
				int countT = nt.poll();
				int countS = ns.poll();
				if (countS < countT) {
					return 0;
				} else {
					result *= combination(countS, countT);
				}
			}
		}
		

		return result;
	}

	private static int combination(int m, int n) {
		
		return factorial(m) /( factorial(n) * factorial(m - n);
	}
	
	private static int factorial(int n) {
		if (n == 0 || n == 1)
			return 1;
		else
			return n * factorial(n - 1);
	}

	private static void shrink(Deque<Character> s, Deque<Integer> ns, String S) {
		s.add(S.charAt(0));
		int count = 1;

		for (int i = 1; i < S.length(); i++) {
			if (s.getLast() == S.charAt(i)) {
				count ++;
			} else {
				ns.add(count);
				s.add(S.charAt(i));
				count = 1;
			}
		}
		ns.add(count);		
	}

	public static void main(String[] args) {

	}

}
