package distinctSubsequences;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.concurrent.CountDownLatch;

public class DistinctSubsequences {
	public static int numDistinct(String S, String T) {
		S = S.toLowerCase();
		T = T.toLowerCase();
		if (S.length() < T.length()) {
			return 0;
		}

		if (T.length() == 0 && S.length() != 0) {
			return 1;
		}

		if (T.length() == 0 && S.length() == 0) {
			return 1;
		}

//		ArrayList<Character> s= new ArrayList<Character>();
		Deque<Character> s = new LinkedList<Character>();
		Deque<Integer> ns = new LinkedList<Integer>();
		char[] t = new char[T.length()];
		int[] nt = new int[T.length()];
		
		s.add(S.charAt(0));
		int count = 1;
//		s.las

		for (int i = 1; i < S.length(); i++) {
			if (s.getLast() == S.charAt(i)) {
				count ++;
			} else {
				ns.add(count);
				s.add(S.charAt(i));
				count = 1;
			}
		}
		ns.add(count);

		return 0;
	}

	public static void main(String[] args) {

	}

}
