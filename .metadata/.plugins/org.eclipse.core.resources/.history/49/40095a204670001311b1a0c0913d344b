package textJustification;

import java.util.ArrayList;
// 这个要比之前自己写的更加简洁，因为考虑到如果只有一个单词或者是最后一个list 这样话都是加上一个空格然后最后将整个string 补充到所指定的长度。
// 开始考虑这题的时候，主要也就是分三种情况，一种是只有一个单词，一种是不是结尾但不止一个单词，还有一个是结尾。
// 
public class Conciser {
	public ArrayList<String> fullJustify(String[] words, int L) {
		int wordsCount = words.length;
		ArrayList<String> result = new ArrayList<String>();
		int curLen = 0;
		int lastI = 0;
		for (int i = 0; i <= wordsCount; i++) {
			if (i == wordsCount || curLen + words[i].length() + i - lastI > L) {
				StringBuffer buf = new StringBuffer();
				int spaceCount = L - curLen;
				int spaceSlots = i - lastI - 1;
				if (spaceSlots == 0 || i == wordsCount) {
					for (int j = lastI; j < i; j++) {
						buf.append(words[j]);
						if (j != i - 1)
							appendSpace(buf, 1);
					}
					appendSpace(buf, L - buf.length());
				} else {
					int spaceEach = spaceCount / spaceSlots;
					int spaceExtra = spaceCount % spaceSlots;
					for (int j = lastI; j < i; j++) {
						buf.append(words[j]);
						if (j != i - 1)
							appendSpace(buf, spaceEach
									+ (j - lastI < spaceExtra ? 1 : 0));
					}
				}
				result.add(buf.toString());
				lastI = i;
				curLen = 0;
			}
			if (i < wordsCount)
				curLen += words[i].length();
		}
		return result;
	}

	private void appendSpace(StringBuffer sb, int count) {
		for (int i = 0; i < count; i++)
			sb.append(' ');
	}
}
